
if(CMAKE_COLOR_MAKEFILE)
    string(ASCII 27 Esc)
    set(BoldYellow  "${Esc}[1;33m")
    set(Magenta     "${Esc}[35m")
    set(Cyan        "${Esc}[36m")
    set(BoldCyan    "${Esc}[1;36m")
    set(White       "${Esc}[37m")
    set(ColourReset "${Esc}[m")
else()
    set(BoldYellow  "")
    set(Magenta     "")
    set(Cyan        "")
    set(BoldCyan    "")
    set(White       "")
    set(ColourReset "")
endif()

macro(summary_message text expression)
    set(summary_value 1)
    foreach(e ${expression})
        string(REGEX REPLACE " +" ";" SUMMARY_EXPRESSION_DEF "${e}")
        if(${SUMMARY_EXPRESSION_DEF})
        else()
            set(summary_value 0)
        endif()
    endforeach()
    if(summary_value)
        message(STATUS "${BoldCyan}  ${text} yes${ColourReset}")
    else()
        message(STATUS "${Cyan}  ${text} no${ColourReset}")
    endif()
    unset(summary_value)
endmacro()

# Gathers all lists of flags
macro(gather_flags result)
    set(${result} "")
    # add the main flags without a config
    list(APPEND ${result} CMAKE_C_FLAGS)
    list(APPEND ${result} CMAKE_CXX_FLAGS)
    list(APPEND ${result} CMAKE_CXX11_STANDARD_COMPILE_OPTION)
    list(APPEND ${result} CMAKE_CXX11_EXTENSION_COMPILE_OPTION)

    if("${CMAKE_CONFIGURATION_TYPES}" STREQUAL "" AND NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
        # handle single config generators - like makefiles/ninja - when CMAKE_BUILD_TYPE is set
        string(TOUPPER ${CMAKE_BUILD_TYPE} config)
        list(APPEND ${result} CMAKE_C_FLAGS_${config})
        list(APPEND ${result} CMAKE_CXX_FLAGS_${config})
        if(${with_linker})
            list(APPEND ${result} CMAKE_EXE_LINKER_FLAGS_${config})
            list(APPEND ${result} CMAKE_MODULE_LINKER_FLAGS_${config})
            list(APPEND ${result} CMAKE_SHARED_LINKER_FLAGS_${config})
            list(APPEND ${result} CMAKE_STATIC_LINKER_FLAGS_${config})
        endif()
    else()
        # handle multi config generators (like msvc, xcode)
        foreach(config ${CMAKE_CONFIGURATION_TYPES})
            string(TOUPPER ${config} config)
            list(APPEND ${result} CMAKE_C_FLAGS_${config})
            list(APPEND ${result} CMAKE_CXX_FLAGS_${config})
        endforeach()
    endif()
endmacro()

message(STATUS "Configured for ${CMAKE_SYSTEM_NAME}")
message(STATUS "  Installation directory:    ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  C++ Compiler type:         ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "  C compile command line:    ${CMAKE_C_COMPILER_LAUNCHER} ${CMAKE_C_COMPILER}")
message(STATUS "  C++ compile command line:  ${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}")

gather_flags(allflags)
message(STATUS "")
foreach(flags ${allflags})
    message(STATUS "  ${flags}:              ${${flags}}")
endforeach()
message(STATUS "")

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  summary_message("Mac OS X Framework :       " MACOSX_FRAMEWORK)
  message(STATUS "")
endif()
